"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class comm_msg_t(object):
    __slots__ = ["sender", "receiver", "msg_type", "position", "r", "q", "exec_time", "seq_no", "bids", "winner"]

    def __init__(self):
        self.sender = ""
        self.receiver = ""
        self.msg_type = ""
        self.position = [ 0.0 for dim0 in range(2) ]
        self.r = 0
        self.q = 0
        self.exec_time = 0.0
        self.seq_no = 0
        self.bids = 0.0
        self.winner = ""

    def encode(self):
        buf = BytesIO()
        buf.write(comm_msg_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __sender_encoded = self.sender.encode('utf-8')
        buf.write(struct.pack('>I', len(__sender_encoded)+1))
        buf.write(__sender_encoded)
        buf.write(b"\0")
        __receiver_encoded = self.receiver.encode('utf-8')
        buf.write(struct.pack('>I', len(__receiver_encoded)+1))
        buf.write(__receiver_encoded)
        buf.write(b"\0")
        __msg_type_encoded = self.msg_type.encode('utf-8')
        buf.write(struct.pack('>I', len(__msg_type_encoded)+1))
        buf.write(__msg_type_encoded)
        buf.write(b"\0")
        buf.write(struct.pack('>2d', *self.position[:2]))
        buf.write(struct.pack(">hhdhd", self.r, self.q, self.exec_time, self.seq_no, self.bids))
        __winner_encoded = self.winner.encode('utf-8')
        buf.write(struct.pack('>I', len(__winner_encoded)+1))
        buf.write(__winner_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != comm_msg_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return comm_msg_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = comm_msg_t()
        __sender_len = struct.unpack('>I', buf.read(4))[0]
        self.sender = buf.read(__sender_len)[:-1].decode('utf-8', 'replace')
        __receiver_len = struct.unpack('>I', buf.read(4))[0]
        self.receiver = buf.read(__receiver_len)[:-1].decode('utf-8', 'replace')
        __msg_type_len = struct.unpack('>I', buf.read(4))[0]
        self.msg_type = buf.read(__msg_type_len)[:-1].decode('utf-8', 'replace')
        self.position = struct.unpack('>2d', buf.read(16))
        self.r, self.q, self.exec_time, self.seq_no, self.bids = struct.unpack(">hhdhd", buf.read(22))
        __winner_len = struct.unpack('>I', buf.read(4))[0]
        self.winner = buf.read(__winner_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if comm_msg_t in parents: return 0
        tmphash = (0xe99f5f20f1d04e6b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if comm_msg_t._packed_fingerprint is None:
            comm_msg_t._packed_fingerprint = struct.pack(">Q", comm_msg_t._get_hash_recursive([]))
        return comm_msg_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

